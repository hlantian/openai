package com.zxiaoyao.openai.api.completion.chat;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;

/**
 * @Description Each object has a role (either "system", "user", or "assistant") and content (the content of the message). Conversations can be as short as 1 message or fill many pages.</p>
 * <p>Typically, a conversation is formatted with a system message first, followed by alternating user and assistant messages.</p>
 * <p>The system message helps set the behavior of the assistant. In the example above, the assistant was instructed with "You are a helpful assistant."<br>
 * The user messages help instruct the assistant. They can be generated by the end users of an application, or set by a developer as an instruction.<br>
 * The assistant messages help store prior responses. They can also be written by a developer to help give examples of desired behavior.
 * 每个对象都有一个角色（"系統"、"用戶"或 "助手"）和内容（信息内容）。对话可以短至一条信息，也可以长达许多页。</p>
 * <p>通常情况下，对话的格式是系统信息在前，用户信息和助手信息在后。</p>
 * <p>系统信息有助于设定助手的行为。在上面的例子中，助手得到的指示是 "你是一个乐于助人的助手"。<br>
 * 用户信息有助于向助手发出指令。它们可以由应用程序的最终用户生成，也可以由开发人员设置为指令。<br>
 * 辅助信息有助于存储之前的响应。这些信息也可以由开发人员编写，以帮助提供所需的行为示例。
 * </p>
 * @Author hlantian
 * @Date Created in 14:47 2023/10/8
 * @Version 1.0
 */
@Data
@NoArgsConstructor(force = true)
@RequiredArgsConstructor
@AllArgsConstructor
public class ChatMessage {

    /**
     * Must be either 'system', 'user', 'assistant' or 'function'.<br>
     * You may use {@link ChatMessageRole} enum.
     * 必须是 "system"、"user"、"assistant "或 "function"。
     * 您可以使用 {@link ChatMessageRole} 枚举。
     */
    @NonNull
    private String role;
    @JsonInclude() // content should always exist in the call, even if it is null  内容应始终存在于调用中，即使该内容为空


    private String content;

    //name is optional, The name of the author of this message. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
    // name 为可选项，此邮件作者的姓名。可包含 a-z、A-Z、0-9 和下划线，最大长度为 64 个字符。
    private String name;

    @JsonProperty("function_call")
    private ChatFunctionCall functionCall;

    /**
     * 结束原因：length / stop / null
     */
    private String finishReason;

    public ChatMessage(String role, String content) {
        this.role = role;
        this.content = content;
    }

    public ChatMessage(String role, String content, String name) {
        this.role = role;
        this.content = content;
        this.name = name;
    }

}
